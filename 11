#include <bits/stdc++.h> 

using namespace std;  
struct Item 
{ 
	int value, weight; 
	Item(int value, int weight) : value(value), weight(weight) 
	{} 
}; 

bool cmp(struct Item a, struct Item b) 
{ 
	double r1 = (double)a.value / a.weight; 
	double r2 = (double)b.value / b.weight; 
	return r1 > r2; 
} 

double fractionalKnapsack(int W, struct Item arr[], int n) 
{ 
	sort(arr, arr + n, cmp); 

	// Uncomment to see new order of Items with their ratio 
	
	for (int i = 0; i < n; i++) 
	{ 
		cout << arr[i].value << " " << arr[i].weight << " : " 
			<< ((double)arr[i].value / arr[i].weight) << endl; 
	} 
	

	int curWeight = 0; 
	double finalvalue = 0.0; 

	
	for (int i = 0; i < n; i++) 
	{ 
		if (curWeight + arr[i].weight <= W) 
		{ 
			curWeight += arr[i].weight; 
			finalvalue += arr[i].value; 
		}  
		else
		{ 
			int remain = W - curWeight; 
			finalvalue += arr[i].value * ((double) remain / arr[i].weight); 
			break; 
		} 
	} 

	return finalvalue; 
} 

int main() 
{ 
	int W;
	cout<<"enter the total capacity:";
	cin>>W;
	Item arr[] = {{60, 10}, {100, 20}, {120, 30}}; 

	int n = sizeof(arr) / sizeof(arr[0]); 

	cout << "Maximum value we can obtain = "
		<< fractionalKnapsack(W, arr, n); 
	return 0; 
}

/*
enter the total capacity:45
Maximum value we can obtain = 60 10 : 6
100 20 : 5
120 30 : 4
220
*/
